[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "My name is Alden Kling. I am currently taking DSR002 at Pomona College."
  },
  {
    "objectID": "MarchMadness.html",
    "href": "MarchMadness.html",
    "title": "March Madness",
    "section": "",
    "text": "library(ggplot2)\nteam_results &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-03-26/team-results.csv')\n\nRows: 236 Columns: 20\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): TEAM, F4PERCENT, CHAMPPERCENT\ndbl (17): TEAMID, PAKE, PAKERANK, PASE, PASERANK, GAMES, W, L, WINPERCENT, R...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nggplot(team_results, aes(y = R64, x = PAKE)) +\n  geom_point(aes(color = CHAMP), size = 3, alpha = 0.8) +\n  scale_color_gradient(low=\"lightblue\", high=\"black\") +\n  labs(\n    y = \"tournaments attended\",\n    x = \"performance against komputer expectation\",\n    title = \"Tournaments Attended Vs. Performance Against Komputer Expectation\"\n)"
  },
  {
    "objectID": "DickinsonPoems.html",
    "href": "DickinsonPoems.html",
    "title": "DickinsonPoems",
    "section": "",
    "text": "── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\nLoading required package: viridisLite\n\n\n\nlibrary(DickinsonPoems)\nfilename &lt;- list.files(system.file(\"extdata\", package = \"DickinsonPoems\"))\npoems &lt;- vector(\"character\", length(filename))\nfor(i in 1:length(filename)){\n  lines &lt;- readLines(paste(system.file(\"extdata\", package = \"DickinsonPoems\"), filename[i], sep = \"/\"))\n  lines &lt;- lines[-c(1:2)]\n  lines &lt;- lines[str_detect(lines, \"^ $\", negate = TRUE)]\n  poems[i] &lt;- str_c(lines, sep = \"\", collapse = \"| \")\n}\npoems &lt;- data.frame(id = str_remove(str_sub(filename, 15), \"^0*\"), series = str_sub(filename, 10, 10), poem = poems)\n\nInvestigating the collection of Dickinson’s poems, I first decided to organize the data as a long data frame. Each unit of observation is a poem. The table includes three columns, the series, ID, and text of the poem for each unit of observation.\n\npoems |&gt; mutate(nlines = str_count(poem, \"\\\\|\")) |&gt;\nggplot(aes(x = series, y = nlines, fill = series)) +\n  geom_boxplot() +\n  scale_fill_viridis(discrete = TRUE, alpha=0.6) +\n  geom_jitter(color=\"black\", size=0.4, alpha=0.9) +\n  labs(\n    x = \"series\",\n    y = \"number of lines\",\n    title = \"Distribution of number of Lines throughout Series\"\n  )\n\n\n\npoems |&gt; mutate(nlines = str_count(poem, \"\\\\|\")) |&gt;\nggplot(aes(x = series, y = nlines, fill = series)) +\n  geom_violin() +\n  scale_fill_viridis(discrete = TRUE, alpha=0.6) +\n    labs(\n    x = \"series\",\n    y = \"number of lines\",\n    title = \"Distribution of number of Lines throughout Series\"\n  )\n\n\n\n\nThese plots investigate the distribution of the number of lines in each poem through out each of the three series in the collection. As it turns out, the number of lines and their distribution was relatively consistent throughout series. It is notable that there are far more poems in series three than the other two. By far the most interesting detail to come out of this relatively mundane set of plots is the grouping that occurs in series three. Especially evident because of the increased sample, there are clearly grouped tiers at 3, 7, 12, 15, 20, and 24 lines.\n\nspacy_install()\n\nWarning in spacy_install(): Skipping installation. Use `force` to force\ninstallation or update. Or use `spacy_download_langmodel()` if you just want to\ninstall a model.\n\nspacy_initialize(model = \"en_core_web_sm\")\n\nsuccessfully initialized (spaCy Version: 3.7.5, language model: en_core_web_sm)\n\nnouns &lt;- unique((str_c(poems$poem) |&gt; tolower() |&gt;\n            spacy_parse(pos = TRUE) |&gt; unnest_tokens(word, token) |&gt;\n              filter(pos == \"NOUN\"))[[\"word\"]])\nexcluded_words &lt;- c(\"t\", \"so\", \"by\", \"be\", \"go\", \"tell\")\n\nword_freq &lt;- data.frame(text = str_c(poems$poem)) |&gt; \n  mutate(text = tolower(text)) |&gt; \n  mutate(text = str_remove_all(text, '[[:punct:]]|\\\\|')) |&gt; \n  mutate(tokens = str_split(text, \"\\\\s+\")) |&gt;\n  unnest(cols = c(tokens)) |&gt; \n  count(tokens) |&gt;\n  arrange(desc(n)) |&gt; \n  rename(word = tokens, freq = n) |&gt;\n  filter(word %in% nouns) |&gt;\n  filter(!word %in% excluded_words)\nword_freq$word[1] &lt;- toupper(word_freq$word[1])\n\nwordcloud2(data = word_freq, size = 2)\n\n\n\n\n\n\nNext I wanted to investigate the content of the poems. To do this, I created a word cloud of all the nouns in Dickinson’s poetry. First, I created a new data frame using the poem strings contained in my previous data frame. The new data frame is also long. Each unit of observation is a word used in the poems, and the table includes two columns, the word and how many times it appears throughout the collection. I sepperatly used the spacyr package to create a list of all the nouns that appeared in the collection. I used this, combined with a coustom list of excluded words that slipped through spacy, to filter my data frame to only include nouns. Finally, I used the wordcloud2 package to create the wordcloud."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Alden Kling",
    "section": "",
    "text": "My name is Alden Kling, and this is my website."
  },
  {
    "objectID": "EnglishEd.html",
    "href": "EnglishEd.html",
    "title": "Education in English Towns",
    "section": "",
    "text": "library(ggplot2)\nenglish_education &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-01-23/english_education.csv')\n\nRows: 1104 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (13): town11cd, town11nm, size_flag, rgn11nm, coastal, coastal_detailed,...\ndbl (18): population_2011, ks4_2012_2013_counts, key_stage_2_attainment_scho...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nggplot(english_education, aes(y = population_2011 / 1000, x = education_score)) +\n  geom_point(aes(color = university_flag),  alpha = 0.5) +\n  scale_y_log10() +\n  labs(\n    y = \"town population (1000s)\",\n    x = \"education score\",\n    title = \"Town Population in English Towns Vs. Education Score\"\n)\n\nWarning: Removed 4 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  }
]